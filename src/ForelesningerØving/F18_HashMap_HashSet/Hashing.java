package Forelesninger√òving.F18_HashMap_HashSet;

import java.util.Objects;

public class Hashing {

}

//Et map: N√∏kkel og verdi, kalles derfor ofte for dictionary. Hver n√∏kkel kan maks dukke opp en gang.

//Hva er N og V? Det er bare et annet navn for generisk typeparameter. Det er akkurat som T. bruker bare N og V for lesbarhet.
interface Map<N, V>{
    //Legger inn en verdi med n√∏kkel og verdi, gir ut en eventuell verdi om den overskrev noe
    public V leggInn(N n√∏kkel, V verdi);

    //fjerner en verdi basert p√• n√∏kkel, og gir ut verdien den fjernet
    public V fjern(N n√∏kkel);

    //henter en verdi basert p√• en n√∏kkel
    public V hent(N n√∏kkel);
}


//Et set skal bare kunne legge inn et element, sjekke om et element er med, og fjerne element. Ikke hente spesifikke elementer elller bry seg om rekkef√∏lge. Teller ikke et element flere ganger.
interface Set<V>{
    public V leggInn(V verdi);
    public V fjern(V verdi);
    public V inneholder(V verdi);
}

class Identitet<T>{
    int id;
    String navn;


    //overskriver .equals metoden, spesifikt til det vi trenger den til.
    //Standard-versjonen sjekker bare om to objekter er samme plass i minnet.
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true; //sjekker om det er n√∏yaktig samme objekt.
        /*F. eks:
        *   Test t1 = new Test("Thilo", 21);
            System.out.println(t1.equals(t1)); // true*/

        //Dette sjekker f√∏rst om obj == null, da kan den ikke v√¶re lik noe.
        //S√• sjekker den om objektet er fra samme klasse som v√•rt, hvis ikke kan de ikke v√¶re like.
        if (obj==null || getClass() != obj.getClass()) return false;

        //N√• kan vi caste obj til Identitet, fordi vi kan garantere at obj faktisk er et Identitet-objekt.
        //Vi caster, fordi parameteret v√•rt er Object, ikke Identitet, s√• for √• kunne gj√∏re obj.id s√• m√• det castes til Identitet.
        Identitet<?> identitet = (Identitet<?>) obj; //Dette forteller java at obj er av type Identitet.

        //Vi castet obj til √• bli objektet identitet av typen Identitet, s√• n√• kan vi bruke dets id og navn til √• sammenligne
        return id == identitet.id && Objects.equals(navn, identitet.navn);
    }
}

class HashMap<N, V> implements Map<N, V>{

    //Dette er en array av lenkede lister. Hver plass i tabellen peker til en Node som igjen kan peke videre til neste node. Det er s√•nn vi h√•ndterer kollisjoner (at to ting er p√• samme indeks)
    Node[] hash;

    int antall; //hvor mange elementer som er lagret i hashmapen

    //tabellst√∏rrelse. Hvor mange posisjoner arrayet kan ha. alts√• antall indekser. Imotsetning til antall som teller hver indeks + alle elementer som er lagret der.
    int dimensjon;

    //Dette er en variabel som forteller hvor full tabellen kan v√¶re f√∏r den utvides. (75% f√∏r vi utvider)
    //tetthet er lagret som en float fordi den representerer et forhold ‚Äî alts√• en desimalverdi mellom 0 og 1, ikke et helt tall.
    float tetthet = 0.75f;

    //Dette er maksimalt antall elementer du kan ha f√∏r du m√• utvide tabellen. N√•r antal >= grense, kaller man p√• en utvid()-metode som oppretter en ny st√∏rre tabell.
    int grense;


    private class Node{
        N n√∏kkel;
        V verdi;
        Node neste;

        public Node(N n√∏kkel, V verdi, Node neste) {
            this.n√∏kkel = n√∏kkel;
            this.verdi = verdi;
            this.neste = neste;
        }
    }

    public HashMap(){
        this.dimensjon = 13; //start st√∏rrelse p√• hash tabell, ofte et primtall som 13

        //Dette beregner antall elementer arrayet kan ha f√∏r den m√• utvides. Det er antall posisjoner (dimensjon) x prosenten vi har satt tettheten til.
        //DVS: hvis vi har en array p√• 100 plasser, kan den n√• bli fylt opp til 75 f√∏r den m√• utvides (tetther= 0.75)
        this.grense = (int) (tetthet*dimensjon);

        //oppretter tabellen: Det var s√• mye kluss med dette, ingenting funket unntatt dette:
        //her oppretter vi en ny Object- tabell med st√∏rrelse p√• dimensjonen (antall posisjoner) som n√• er 13.
        hash = (Node[]) new Object[dimensjon];;
    }


    /*FORKLARING AV HASHCODE -> INDEKS:
    * üí° 1. Hvorfor n√∏kkelen ikke = indeksen
    * N√•r du skriver:
    * map.leggInn(23, "Thilo");
    * s√• betyr ikke det at verdien havner p√• hash[23].
    * Grunnen er at n√∏kler i en HashMap kan v√¶re hva som helst ‚Äî ikke bare tall:
    * Strings, Objekter, Andre klasser du lager selv (f.eks. Identitet)
    *
    * ‚Ä¶og Java aner jo ikke hvor i tabellen "Thilo" eller {id=7, navn="Per"} skal ligge.
    * Derfor m√• vi oversette n√∏kkelen til et tall ‚Äî og det er hashverdien som gj√∏r det.
    *
    * N√•r du kaller n√∏kkel.hashCode(), s√• sier du egentlig:
    * ‚ÄúHei Java, gi meg et tall som representerer dette objektet.‚Äù
    */


    /*Hva gj√∏r finnIndeks?
    * - Den tar inn en n√∏kkel og regner ut posisjonen til n√∏kkelen i tabellen hash[].
    * - Alle andre metoder trenger indeksen for √• fungere.
    * Basically, denne metoden tar n√∏kkelen til et objekt og henter HASH-VERDIEN til n√∏kkelen og finner dets riktige posisjon i arrayet.*/
    private int finnIndeks(N n√∏kkel){
        Objects.requireNonNull(n√∏kkel,"Null er ikke lov");
        int hash = n√∏kkel.hashCode();

        //hash KAN v√¶re negativ, gj√∏r den positiv:

        //0x7fffffff er bare et tall i heksadesimal.
        //I bin√¶r er det:
        //
        //0111 1111 1111 1111 1111 1111 1111 1111
        hash = hash & 0x7fffffff; //BETYR: ‚ÄúBehold alle bitene unntatt den f√∏rste (fortegnsbiten), sett den til 0.‚Äù

        //Tar modulo hashkoden med tabellens lengde, og f√•r da en indeks:
        int indeks = hash%dimensjon;

        return indeks;
    }


    @Override
    public V leggInn(N n√∏kkel, V verdi) {
        Objects.requireNonNull(n√∏kkel, "Null er ikke lov");

        //sjekke om tabellen m√• utvides
        if (antall>= grense) utvid();
        //hente indeksen
        int indeks = finnIndeks(n√∏kkel);

        //finner f√∏rste node p√• indeksen vi fant
        Node p = hash[indeks];

        //g√•r gjennom alle nodene p√• den posisjonen:
        while (p!=null) {

            //SJEKKER OM DEN FINNES FRA F√òR: hvis vi finner en matchende verdi, s√• sjekker vi om n√∏kkelen er lik (om det er samme innhold i objektet), og da m√• vi overskrive
            if (p.n√∏kkel.equals(n√∏kkel)){
                V tmp = p.verdi;
                p.verdi = verdi;
                return tmp;
            }
            p = p.neste;
        }
        //N√• er vi p√• slutten av den lenkede listen p√• posisjon indeks
        //vi oppretter en ny node med n√∏kkelen og verdien OG setter den forrerst, alts√• neste noden er den tidligste forreste noden (fordi det er ingen forrige peker og ellers m√•tte vi endre pekeren til den siste noden til √• peke p√• den nye, mer jobb?)
        Node ny = new Node(n√∏kkel, verdi, hash[indeks]);

        // Vi setter den nye noden f√∏rst i kjeden p√• denne posisjonen
        // slik at den peker p√• forrige hode (hash[indeks]) og blir ny start.
        hash[indeks] = ny;
        antall++;
        return null;
    }

    private void utvid() {
        int nyDimensjon = 2*hash.length+1;

        Node[] nyHash = (Node[]) new Object[nyDimensjon];
    }

    @Override
    public V fjern(N n√∏kkel) {
        Objects.requireNonNull(n√∏kkel, "Null er ikke lov");
        int indeks = finnIndeks(n√∏kkel);

        //peker node som begynner p√• f√∏rste node p√• den posisjonen
        Node p = hash[indeks];

        //"forrige"-node for √• fjerne p.
        Node q = null;


        while(p!= null){

            //Vi har funnet noden vi vil slette
            if (p.n√∏kkel.equals(n√∏kkel)){
                V tmp = p.verdi; //lagrer verdien

                //hvis det var f√∏rste node, alts√• forrige er null, da tar vi at den f√∏rste noden (hash[indeks]) blir p.neste, alts√• vi hopper over f√∏rste node.
                if (q==null) hash[indeks] = p.neste;

                //hvis noden ikke var f√∏rste node, peker vi forrige node sin neste til p.neste, hopper alts√• over p.
                else {
                    q.neste = p.neste;
                }
                //reduserer antall og returnerer verdien
                antall--;
                return tmp;
            }
            //g√•r videre
            else {
                q = p;
                p = p.neste;
            }
        }
        //har ikke funnet noden
        return null;
    }

    @Override
    public V hent(N n√∏kkel) {
        Objects.requireNonNull(n√∏kkel, "Null er ikke lov");
        int indeks = finnIndeks(n√∏kkel);
        Node p = hash[indeks];

        //vi m√• g√• gjennom alle nodene p√• denne indeksen, fordi denne indeksen har flere n√∏kler, s√• vi m√• sikre at vi sender tilbake verdien til den riktige noden.
        while (p!=null){
            if (p.n√∏kkel.equals(n√∏kkel))
                return p.verdi;
            p=p.neste;
        }
        return null;
    }
}