package Forelesninger√òving.F17_HuffmannTre;

import java.util.PriorityQueue;

class HuffmannTre{
    Node rot;
    char[] tegn; //dette er tegnene vi vil kode og dekode osv.
    private static final class Node implements Comparable<Node>{
        char verdi;
        Node venstre;
        Node h√∏yre;
        int prioritet;


        //definerer hvordan vi sammenligner noder. Vi sammenligner det mha prioritet.
        @Override
        public int compareTo(Node o) {
            return this.prioritet - o.prioritet;
        }

        //lar oss lage en node med verdi og prioritet, (tegn og frekvens)
        public Node(char verdi, int prioritet){
            this.verdi = verdi;
            this.prioritet = prioritet;
            venstre=null;
            h√∏yre=null;
        }

        private Node(){
            venstre=null; h√∏yre=null;
            prioritet = 0;
            verdi = 0;
        }

        //VIKTIG: Dette er den konstrukt√∏ren som lar oss kombinere noder (du husker n√•r vi m√• kombinere de to minste i listen, denne lar oss gj√∏re det.)
        public Node(Node venstre, Node h√∏yre){

            //her blir de  to nodene som blir sendt inn satt som barna til den nye kombinerte noden!!!
            this.h√∏yre = h√∏yre; this.venstre = venstre;


            this.prioritet = venstre.prioritet+ h√∏yre.prioritet;
        }

    }

    //Konstrukt√∏r til huffmanntreet. Denne bygger faktisk treet (ikke venstreorientert kanonisk, men start-treet)
    //Den tar inn lista med tegnene og frekvensene deres
    public HuffmannTre(char[] tegn, int[] frekvenser){
        if (tegn.length != frekvenser.length)
            throw new IllegalArgumentException("Antall tegn og antall frekvenser m√• v√¶re like");
        if (tegn.length<2)
            throw new IllegalArgumentException("Skal ha minst to tegn i et Huffmanntre");

        this.tegn = tegn;

        //viktig: sett pq til √• ta inn bare noder
        PriorityQueue<Node> pq = new PriorityQueue();

        for (int i = 0; i < frekvenser.length; i++){
            //denne g√•r gjennom lista med tegn og frekvenser, og legger inn alle bladnodene (nodene med verdiene) i PQ. Dette er da en liste over alle tegn, som blir bladnoder.
            //resultatet vil v√¶re en liste over tegn sortert fra minst prioritet til st√∏rst. (alts√• minst frekvens til st√∏rst)
            pq.add(new Node(tegn[i],frekvenser[i]));
        }

        // Etter denne l√∏kken:
        // pq inneholder n√• √©n node per tegn, alle bladnoder.
        // Neste steg i Huffman-algoritmen (som skjer etter denne l√∏kken)
        // vil v√¶re √• sl√• sammen de to laveste frekvensene gjentatte ganger
        // til bare √©n node (roten) st√•r igjen ‚Äì det ferdige Huffman-treet.

        //s√• vi m√• iterere frem til pq sin size er 1
        while(pq.size()>1){
            //fjerner det minste elementet i priorityqueuen.
            Node p = pq.remove();
            //fjerner det nest minste elemenetet i pq (n√•v√¶rende minste)
            Node q = pq.remove();

            //legger inn en ny node i PQ med den kombinerte prioriteten til p og q.
            //denne nye noden blir forelder til p og q.

            //S√• n√•r du skriver dette, skjer dette:  (se konstrukt√∏ren. p blir satt til dets venstrebarn og q til h√∏yre)
            // this.venstre = p;
            //this.h√∏yre = q;
            //this.frekvens = p.frekvens + q.frekvens;
            pq.add(new Node(p,q));
        }
        //n√• er det en node igjen i pq, og det er rota. S√• vi setter roten til den og fjerner elementet.
        rot = pq.remove();
    }
    public void printKoder(){
        printKoder(rot, "");
    }

    //denne metoden printer ut koden den f√•r s√• langt hver gang den treffer en node. Det betyr at hver ting den faktisk printer ut er koden til en node.
    private void printKoder(Node denne, String kodeTilN√•){
        //hvis vi har funnet en bladnode, skriv ut koden vi har s√• langt.
        if (denne.verdi!=0) {
            System.out.println(kodeTilN√•);
            //kodeTilN√• + "0" skaper en ny streng, det endrer ikke den gamle.
            //Etter at den rekursive kallet er ferdig (alts√• n√•r metoden ‚Äúreturnerer‚Äù og du g√•r opp ett niv√• igjen i treet), fortsetter du med den gamle kodeTilN√•-verdien, uten "0" lagt til.
            return;
        }
        //hvis denne.verdi == 0, s√• har vi funnet en node som ikke er en av bladnodene. Da vet vi at den har barn? s√• vi kaller rekursivt p√• barna
        printKoder(denne.venstre, kodeTilN√• + "0");
        printKoder(denne.h√∏yre, kodeTilN√•+"1");
        //I Huffman-treet er det slik at hver indre node alltid har to barn.
    }

    //Hva denne metoden skal gj√∏re:
    //Returnere en String[] der hver indeks svarer til samme indeks i tegn[]
    //koder[i] skal v√¶re Huffmann-koden til tegn[i]

    //denne metoden trenger hjelpemetoden private finnKoder
    public String[] finnKoder(){
        String[] koder = new String[tegn.length];
        finnKoder(rot, "", koder);
        return koder;
    }

    //denne metoden trenger hjelpemetoden private int finn(char c)
    private void finnKoder(Node denne, String kodeTilN√•, String[] koder){
        if (denne == null) return;

        if (denne.verdi!= 0){
            //hvis vi har funnet en bladnode, finner vi posisjonen til dette tegnet i tegn arrayet
            int pos = finn(denne.verdi);
            //legg koden du har bygget opp (kodeTilN√•) inn i koder[indeks].
            koder[pos] = kodeTilN√•; //FORDI: Dette legger inn den tilsvarende koden til tegnet vi er p√• n√• i kode arrayet. S√• hvis vi er p√• posisjon 3 som er C f. eks, vil posisjon 3 i koder[] v√¶re koden til C.
            return; //stopper oss fra √• g√• videre rekursivt, vi har jo funnet en node. Kunne bli erstattet med else
        }
        finnKoder(denne.venstre, kodeTilN√•+"0", koder);
        finnKoder(denne.h√∏yre, kodeTilN√•+"1", koder);
    }


    //denne finner posisjonen til et bestemt tegn i arrayet.
    private int finn(char c){
        for (int i = 0; i < tegn.length; i++){
            if (tegn[i]==c)
                return i;
        }
        throw new IllegalStateException("Noe har g√•tt galt!");
    }

    //skal finne lengden p√• hver huffman-kode, (hvor mange biter til hvert tegn)
    public int[] finnLengder(){
        //ny array som samsvarer indeksene til tegn, koder og frekvenser til bitlengde
        int[] lengder = new int[tegn.length];
        finnLengder(rot,0,lengder);
        return lengder;
    }

    //fungerer nesten helt likt som finnKoder
    private void finnLengder(Node denne, int lengde, int[] lengder){
        if (denne==null)return;
        //funnet en bladnode
        if (denne.verdi!=0){
            int pos = finn(denne.verdi);
            //setter lengden vi har laget til n√• til lengder[pos]
            lengder[pos] = lengde;
            return;
        }

        //Dette adder 1 til lengden hver gang vi g√•r ned et niv√•. og kaller rekursivt p√• metoden for √• sette inn lengden i arrayet.
        finnLengder(denne.venstre, lengde+1, lengder); //Hver gang du g√•r ett niv√• ned i treet, legger du til +1 i lengden.
        finnLengder(denne.h√∏yre, lengde+1, lengder);
        //N√•r du kommer til et blad, stopper du og lagrer den n√•v√¶rende lengden i lengder[].
        //‚Üí F.eks. lengder[pos] = lengde;
    }


    //vi trenger denne metoden for
    private int maks(int[] lengder){
        int maks = lengder[0];
        for (int i = 1; i < lengder.length; i++){
            if (lengder[i] > maks)
                maks = lengder[i];
        }
        return maks;
    }


    //finnLengder() ‚Üí finner hvor lang hver kode skal v√¶re.
    //finnKanoniskeKoder() ‚Üí bygger de faktiske kodene ut fra lengdene.

    public String[] finnKanoniskeKoder(){
        //Oppretter et array med lengdene til hvert tegn
        int[] lengder = finnLengder();

        // Finner den st√∏rste lengden (alts√• den lengste Huffman-koden).
        // Dette tilsvarer dybden til den dypeste bladnoden i treet,
        // eller "niv√•et nederst" i Huffman-treet.
        int n = maks(lengder); //finner den st√∏rste lengden, alts√• det nederste niv√•et til treet.

        // Oppretter et array for √• lagre de kanoniske kodene (i strengform)
        // til hvert tegn, i samme rekkef√∏lge som tegn[]
        String[]posisjoner = new String[tegn.length]; //lagrer posisjonen til hvert tegn i et array



        // 1 << n betyr "1 flyttet n biter til venstre",
        // som er det samme som 2^n.


        // Hvis n = 4, f√•r du f.eks.:
        // 1 << 4 = 16 (bin√¶rt: 10000)

        // Denne brukes som et utgangspunkt for √• generere
        // de kanoniske kodene, fordi man kan "g√• nedover" niv√•ene
        // (lengdene) fra den lengste til den korteste koden
        // ved √• h√∏yreskifte (dele p√• 2) senere.


        int posisjon = 1<< n; //S√• 2^n sier egentlig: ‚ÄúHvis jeg har n biter, finnes det totalt 2^n forskjellige kombinasjoner.‚Äù
        //hvor mange forskjellige bin√¶re tall kan jeg lage med n biter
        //üëâ 2^n handler om antall mulige koder, ikke selve koden.

        //Eksempel:
        //1 << 4 = 16, som i bin√¶r form er 10000.
        //Men datamaskinen lagrer det som tallet 16, ikke som teksten "10000".


        //itererer over alle kodelengdene, begynner p√• den lengste (alts√• nederst i treet)
        //Vi starter p√• det lengste niv√•et (n= lengste Huffman-kodelengde)
        //og jobber oss OPP mot de kortere kodene (niv√•ene over i treet)
        for (int i = n; i >= 0; i--){

            //den indre for loopen g√•r gjennom alle tegnene
            // Sjekker: har dette tegnet kodelengde lik i? (niv√•et vi er p√• n√•.)
            //vi gj√∏r dette for √• f√• en oversikt over hvilke tegn som er p√• hvilket niv√•
            for (int j = 0; j<tegn.length; j++){

                //Hvis tegnet har samme lengde om niv√•et vi er p√•:
                if (lengder[j] == i)

                    //Oppretter vi en bin√¶rstreng av det n√•v√¶rende tallet i posisjon
                    //Integer.toBinaryString(posisjon) gj√∏r for eksempel 18 -> "10010"
                    //Vi √∏ker s√• "posisjon" med 1 for √• klargj√∏re neste kode

                    // .substring(1) brukes for √• "kutte bort" det f√∏rste 1-tallet
                    // fordi vi startet posisjon p√• 1<<n (f.eks. 10000 for n=4),
                    // og vi vil bare ha de n bitene etter det (de faktiske kodene).
                    //FORDI: 10-talls-indeksen til en node i et bin√¶rtre, gjort om til bin√¶rtall er n√∏yaktig stegene vi m√• ta for √• komme oss til den noden UNNTATT det f√∏rste tallet.
                    // for eksempel 18 = 10010. Da fjerner vi den f√∏rste -> 0010. Da m√• vi g√• venstre, venstre, h√∏yre, venstre.
                    posisjoner[j] = Integer.toBinaryString(posisjon++).substring(1);
            }

            //N√• er vi ferdig med alle tegn som har lengde i. Da m√• vi dele posisjon p√• 2 (som er det samme som √• h√∏yreskifte en bit)

            //hvorfor?
            //fordi vi skal g√• OPP et niv√•, s√• bit-koden blir en bit kortere. Derfor fjerner vi det siste bitniv√•et.
            //posisjon /=2 betyr basically fjern en bit fra lengden av koden
            //(eller mer presist: h√∏yreskifter alle bitene med √©n plass, som betyr g√• ett niv√• opp i treet).
            posisjon /= 2;
        }
        //returnerer lista med kodene til hvert tegn
        return posisjoner;
    }


    //Denne metoden tar en tekst (input) og gj√∏r den om til en lang streng av 0 og 1 ved √• sl√• opp Huffmann-koden til hvert tegn og lime dem sammen
    public String kod(String input){
        StringBuilder sb = new StringBuilder();
        char[] inputArray = input.toCharArray();
        String[] koder = finnKoder();

        for (int i = 0; i < inputArray.length; i++){
            //finner posisjonen til tegnet i Huffman-tabellen din, alts√• hvilken plass i alfabetet ditt det tegnet har (i er posisjonen til tegnet i teksten vi koder)
            int pos = finn(inputArray[i]);
            //legger til den tilsvarende koden til tegnet vi fant inn i stringbuilderen.
            sb.append(koder[pos]);
        }
        //returnerer da en streng med alle kodene til alle tegnene i en lang streng.
        return sb.toString();
    }

    public String kodKanonisk(String input){
        StringBuilder sb = new StringBuilder();
        char[] inputArray = input.toCharArray();
        //eneste forskjellen:
        String[] koder = finnKanoniskeKoder();

        for (int i = 0; i < inputArray.length; i++){
            int pos = finn(inputArray[i]);
            sb.append(koder[pos]);
        }
        return sb.toString();
    }

    //denne metoden skal ta en kode og finne de riktige tegnene til den
    public String dekod(String input){
        StringBuilder sb = new StringBuilder();
        char[] inputArray = input.toCharArray();
        //pekeren:
        Node denne = rot;

        for (int i = 0; i < inputArray.length; i++){
            if (inputArray[i] == 0)
                denne = denne.venstre; // hvis den treffer en 0, g√• et hakk til venstre
            else
                denne = denne.h√∏yre; // hvis den treffer en 1, g√• et hakk til h√∏yre

            //hvis den finner en bladnode:
            if (denne.verdi !=0) {
                sb.append(denne.verdi);
                denne = rot;
            }
        }

        //hvis denne != rot n√•r l√∏kken er ferdig, betyr det at du ikke endte p√• et blad etter siste bit.
        //Med andre ord: du stoppet midt i treet ‚Äî du begynte √• lese en kode, men den ble aldri fullf√∏rt.
        //Derfor er den bin√¶re strengen ugyldig (den slutter ikke p√• et fullstendig tegn)
        if (denne!=rot) throw new IllegalArgumentException("Ikke en lovlig tekst √• dekode");
        return sb.toString();
    }

    //Neste metode bygger det faktiske kanoniske treet basert p√• de kanoniske kodene vi har funnet.

}

public class HuffmannTreMain {
    public static void main(String[] args) {
        char[] tegn = {'A', 'B', 'C', 'D', 'E'}; // M√• v√¶re sortert alfabetisk
        int[] frekvens = {17, 9, 5, 2, 12};
        HuffmannTre hf = new HuffmannTre(tegn, frekvens);
        hf.printKoder();
        System.out.println(hf.kod("ABCDE"));
    }
}
